menu "Motor Control"

config DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
    bool "Dual Shunt FOC using PLL Estimator on MCLV-2 (with internal Op-Amp)"
	set MC_ENABLE optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADC_USE_DRIVER_NEEDED optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_MODE optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_POLLED_MODE optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLOCK_DIVIDER optionally to 1 if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_WARMUP_CLOCK optionally to "ADCHS_WARMUP_CLOCK_32" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_SOURCE optionally to "INT_SOURCE_ADC_1_DATA0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_VECTOR optionally to "INT_VECTOR_ADC1_DATA0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHNL_0_ALT_INP_SEL_IDX0 optionally to "ADCHS_ALTERNATE_1_CLASS1_AN3" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_TRIGGER_SOURCE_IDX0 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX0 optionally to 1 if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX0 optionally to 2 if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX1 optionally to "ADCHS_CHANNEL_4" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHNL_4_ALT_INP_SEL_IDX1 optionally to "ADCHS_ALTERNATE_3_CLASS1_AN0a" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_TRIGGER_SOURCE_IDX1 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX1 optionally to 1 if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX1 optionally to 2 if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX2 optionally to "ADCHS_CHANNEL_7" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX2 optionally to 4 if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX2 optionally to 2 if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX0 optionally to  y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX0 optionally to "ADCHS_CLASS2_AN10" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX0 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX1 optionally to  y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX1 optionally to "ADCHS_CLASS2_AN15" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX1 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set USE_DRV_CMP optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}  
	set DRV_CMP_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_PERIPHERAL_ID_IDX0 optionally to "CMP_ID_3" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_OUTPUT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_OPAMP_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_INVERTING_INPUT_IDX0 optionally to "CMP_INVERTING_INPUT_4" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_NON_INVERTING_INPUT_IDX0 optionally to "CMP_NON_INVERTING_INPUT_CDAC" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_PERIPHERAL_ID_IDX1 optionally to "CMP_ID_2" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_OPAMP_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_INVERTING_INPUT_IDX1 optionally to "CMP_INVERTING_INPUT_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_NON_INVERTING_INPUT_IDX1 optionally to "CMP_NON_INVERTING_INPUT_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_OPAMP_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_INVERTING_INPUT_IDX2 optionally to "CMP_INVERTING_INPUT_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_NON_INVERTING_INPUT_IDX2 optionally to "CMP_NON_INVERTING_INPUT_1"	if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set USE_DRV_MCPWM optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DRIVER_MODE optionally to "STATIC" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_STOP_IN_IDLE_MODE optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_CLOCK_PRESCALER optionally to "MCPWM_CLOCK_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_TIMER_PERIOD optionally to "3000" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_TIMER_PERIOD optionally to "8" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_PRESCALER optionally to "2" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_CLOCK_PRESCALER optionally to "MCPWM_CLOCK_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_TIMER_PERIOD optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_COMPARE_VALUE optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_POSTSCALER optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_INTERRUPT_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_COMPARE_VALUE optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_POSTSCALER optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_INTERRUPT_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_PRESCALER optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INSTANCES_NUMBER optionally to 12 if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX0 optionally to "MCPWM_CHANNEL1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX0 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX0 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX0 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX0 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX0 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX0 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX0 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX0 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX0 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX0 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX0 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX0 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX0 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX0 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX0 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX0 optionally to "2999" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX0 optionally to "240" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX0 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX0 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX0 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX0 optionally to "MCPWM_FAULT_SOURCE_IS_COMPARATOR3" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX0 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX0 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX0 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX0 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX0 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INTERRUPT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PERIOD_MATCH_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PERIOD_RESET_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_PRIORITY_IDX0 optionally to "INT_PRIORITY_LEVEL4" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_SUBPRIORITY_IDX0 optionally to "INT_SUBPRIORITY_LEVEL0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX1 optionally to "MCPWM_CHANNEL2" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX1 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX1 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX1 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX1 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX1 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX1 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX1 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX1 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX1 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX1 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX1 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX1 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX1 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX1 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX1 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX1 optionally to "240" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX1 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX1 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX1 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX1 optionally to "MCPWM_FAULT_SOURCE_IS_COMPARATOR3" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX1 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX1 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX1 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX1 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX1 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX2 optionally to "MCPWM_CHANNEL3" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX2 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX2 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX2 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX2 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX2 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX2 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX2 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX2 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX2 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX2 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX2 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX2 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX2 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX2 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX2 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX2 optionally to "240" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX2 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX2 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX2 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX2 optionally to "MCPWM_FAULT_SOURCE_IS_COMPARATOR3" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX2 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX2 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX2 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX2 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX2 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX3 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX4 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX5 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX6 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX7 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX8 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX9 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX10 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX11 optionally to n if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set ICESEL optionally to "ICS_PGx2" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_FUNCTION_TYPE optionally to "GPIO_OUT" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_PORT_CHANNEL optionally to "G" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_DIR optionally to "Out" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_FUNCTION_TYPE optionally to "PWM1H" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_PORT_PIN optionally to "14" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_FUNCTION_TYPE optionally to "PWM1L" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_FUNCTION_TYPE optionally to "AN10" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_FUNCTION_TYPE optionally to "OA2OUT" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_PORT_PIN optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_FUNCTION_TYPE optionally to "OA2IN+" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_FUNCTION_TYPE optionally to "OA2IN-" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_PORT_PIN optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_FUNCTION_TYPE optionally to "OA1OUT" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_FUNCTION_TYPE optionally to "OA1IN+" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_PORT_PIN optionally to "2" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_FUNCTION_TYPE optionally to "OA1IN-" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_PORT_PIN optionally to "3" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_FUNCTION_TYPE optionally to "OA3OUT" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_PORT_PIN optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_FUNCTION_TYPE optionally to "OA3IN-" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_FUNCTION_TYPE optionally to "OA3IN+" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_PORT_PIN optionally to "2" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_FUNCTION_TYPE optionally to "AN15" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_PORT_CHANNEL optionally to "E" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_FUNCTION_TYPE optionally to "DAC3" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_PORT_PIN optionally to "8" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_FUNCTION_TYPE optionally to "GPIO_OUT" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_PORT_PIN optionally to "5" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_PORT_CHANNEL optionally to "F" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_DIR optionally to "Out" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_FUNCTION_TYPE optionally to "CLKI" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_FUNCTION_TYPE optionally to "DAC2" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_PORT_PIN optionally to "10" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE} 
	set BSP_PIN_78_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_FUNCTION_TYPE optionally to "GPIO_IN" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_PORT_PIN optionally to "7" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_FUNCTION_TYPE optionally to "GPIO_IN" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_PORT_CHANNEL optionally to "G" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_FUNCTION_TYPE optionally to "PWM3H" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_PORT_PIN optionally to "10" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_FUNCTION_TYPE optionally to "PWM3L" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_PORT_PIN optionally to "11" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_FUNCTION_TYPE optionally to "PWM2H" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_FUNCTION_TYPE optionally to "PWM2L" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_PORT_PIN optionally to "13" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}


	
	default n
	---help---
	<!DOCTYPE HTML>
	<html>
	<h2>MPLAB Harmony Dual Shunt FOC SH Motor with PLL Estimator Application Template</h2>
	<p>	This template generates a code example that exercises Dual Shunt 
	FOC SH Motor with PLL Estimator with the following MHC options:</p>
	<br><b>- ADC Driver </b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Mode: Interrupt</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Clock Divider: 4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Warmup Clock: ADCHS_WARMUP_CLOCK_32</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Interrupt Source: ADC1_DATA0</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Interrupt Vector: ADC1_DATA0</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Number of ADC Channels: 3</br>
	<br><b>&nbsp&nbsp - Channel 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR0</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alternate Input: ADCHS_ALTERNATE_1_CLASS1_AN3</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Source: ADCHS_TRIGGER_SOURCE_PWM1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>&nbsp&nbsp - Channel 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alternate Input: ADCHS_ALTERNATE_3_CLASS1_AN0a</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Source: ADCHS_TRIGGER_SOURCE_PWM1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>&nbsp&nbsp - Channel 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR7</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inputs (class-2): ADCHS_CLASS2_AN10, ADCHS_CLASS2_AN15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Triggers: PWM1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>	
	<br><b>- CMP Driver</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Mode: Polling</br>
	<br><b>&nbsp&nbsp - Channel 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Module: CMP_ID_3 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Op-Amp: Enabled 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inverting Input: CMP_INVERTING_INPUT_4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Non-Inverting Input: CMP_NON_INVERTING_INPUT_CDAC </br>
	<br><b>&nbsp&nbsp - Channel 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Module: CMP_ID_2 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Op-Amp: Enabled 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inverting Input: CMP_INVERTING_INPUT_1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Non-Inverting Input: CMP_NON_INVERTING_INPUT_1 </br>
	<br><b>&nbsp&nbsp - Channel 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Module: CMP_ID_1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Comparator Output: Enabled</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Op-Amp: Enabled 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inverting Input: CMP_INVERTING_INPUT_1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Non-Inverting Input: CMP_NON_INVERTING_INPUT_1 </br>	
	<br><b>- MCPWM Driver</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Primary Timer Period: 3000</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Primary Timer Clock Divider: 1</br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 1</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Post-Scaler: 1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Primary Trigger Cycle Select: Generate Trigger while counter is Incrementing </br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC Trigger Source: Primary Trigger </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Primary Trigger Compare Value: 3000 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Comparator 3 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Interrupt  : Enable </br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Comparator 3 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Disable </br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 3</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Comparator 3 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Disable </br>
	<p>All other ADC and PWM driver configuration options are set optionally to their 
	default values. 
	<p>The ADC driver configuration may be modified by 
	the user using MHC, under Harmony Framework Configuration -> Drivers - > ADC</p>
	<p>The PWM driver configuration may be modified by 
	the user using MHC, under Harmony Framework Configuration -> Drivers - > PWM</p></html>
	---endhelp---

config DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
    bool "Dual Shunt FOC using PLL Estimator on MCLV-2 (with external Op-Amp)"
	set DRV_ADC_USE_DRIVER_NEEDED optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_MODE optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_POLLED_MODE optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLOCK_DIVIDER optionally to 1 if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_WARMUP_CLOCK optionally to "ADCHS_WARMUP_CLOCK_32" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_SOURCE optionally to "INT_SOURCE_ADC_1_DATA0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_VECTOR optionally to "INT_VECTOR_ADC1_DATA0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHNL_0_ALT_INP_SEL_IDX0 optionally to "ADCHS_ALTERNATE_3_CLASS1_AN24" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_TRIGGER_SOURCE_IDX0 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX0 optionally to 1 if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX0 optionally to 2 if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX1 optionally to "ADCHS_CHANNEL_4" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHNL_4_ALT_INP_SEL_IDX1 optionally to "ADCHS_ALTERNATE_2_CLASS2_AN9" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_TRIGGER_SOURCE_IDX1 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX1 optionally to 1 if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE} 
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX1 optionally to 2 if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX2 optionally to "ADCHS_CHANNEL_7" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX2 optionally to 4 if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE} 
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX2 optionally to 2 if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX0 optionally to  y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX0 optionally to "ADCHS_CLASS2_AN10" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX0 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX1 optionally to  y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX1 optionally to "ADCHS_CLASS2_AN15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX1 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}	
	set USE_DRV_MCPWM optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DRIVER_MODE optionally to "STATIC" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_STOP_IN_IDLE_MODE optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_CLOCK_PRESCALER optionally to "MCPWM_CLOCK_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_TIMER_PERIOD optionally to "3000" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_TIMER_PERIOD optionally to "8" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_PRESCALER optionally to "2" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_CLOCK_PRESCALER optionally to "MCPWM_CLOCK_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_TIMER_PERIOD optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_COMPARE_VALUE optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_POSTSCALER optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_INTERRUPT_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_COMPARE_VALUE optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_POSTSCALER optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_INTERRUPT_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_PRESCALER optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INSTANCES_NUMBER optionally to 12 if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX0 optionally to "MCPWM_CHANNEL1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX0 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX0 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX0 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX0 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX0 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX0 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX0 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX0 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX0 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX0 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX0 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX0 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX0 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX0 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX0 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX0 optionally to "2999" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX0 optionally to "240" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX0 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX0 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX0 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX0 optionally to "MCPWM_FAULT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX0 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX0 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX0 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX0 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX0 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INTERRUPT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PERIOD_MATCH_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PERIOD_RESET_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_PRIORITY_IDX0 optionally to "INT_PRIORITY_LEVEL4" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_SUBPRIORITY_IDX0 optionally to "INT_SUBPRIORITY_LEVEL0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX1 optionally to "MCPWM_CHANNEL2" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX1 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX1 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX1 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX1 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX1 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX1 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX1 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX1 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX1 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX1 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX1 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX1 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX1 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX1 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX1 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE} 
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX1 optionally to "240" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX1 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX1 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX1 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX1 optionally to "MCPWM_FAULT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX1 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX1 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX1 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX1 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX1 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX2 optionally to "MCPWM_CHANNEL3" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX2 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX2 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX2 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX2 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX2 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX2 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX2 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX2 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX2 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX2 optionally to "120" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX2 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX2 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX2 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX2 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX2 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX2 optionally to "240" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX2 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX2 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX2 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX2 optionally to "MCPWM_FAULT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX2 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX2 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX2 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX2 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX2 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX3 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX4 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX5 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX6 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX7 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX8 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX9 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX10 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX11 optionally to n if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set ICESEL optionally to "ICS_PGx2" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_FUNCTION_TYPE optionally to "GPIO_OUT" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_PORT_CHANNEL optionally to "G" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_DIR optionally to "Out" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_FUNCTION_TYPE optionally to "PWM1H" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_PORT_PIN optionally to "14" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_FUNCTION_TYPE optionally to "PWM1L" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_FUNCTION_TYPE optionally to "AN10" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_FUNCTION_TYPE optionally to "AN9" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_PORT_PIN optionally to "11" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_FUNCTION_TYPE optionally to "AN15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_PORT_CHANNEL optionally to "E" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_FUNCTION_TYPE optionally to "FLT15" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_PORT_PIN optionally to "4" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_FUNCTION_TYPE optionally to "AN24" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_PORT_PIN optionally to "4" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_FUNCTION_TYPE optionally to "GPIO_OUT" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_PORT_PIN optionally to "5" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_PORT_CHANNEL optionally to "F" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_DIR optionally to "Out" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_FUNCTION_TYPE optionally to "CLKI" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_FUNCTION_TYPE optionally to "DAC2" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_PORT_PIN optionally to "10" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE} 
	set BSP_PIN_78_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_FUNCTION_TYPE optionally to "GPIO_IN" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_PORT_PIN optionally to "7" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_FUNCTION_TYPE optionally to "GPIO_IN" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_PORT_CHANNEL optionally to "G" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_FUNCTION_TYPE optionally to "PWM3H" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_PORT_PIN optionally to "10" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_FUNCTION_TYPE optionally to "PWM3L" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_PORT_PIN optionally to "11" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_FUNCTION_TYPE optionally to "PWM2H" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_FUNCTION_TYPE optionally to "PWM2L" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_PORT_PIN optionally to "13" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_OD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_CN optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_PU optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_PD optionally to "" if DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}


	default n
	---help---
	<!DOCTYPE HTML>
	<html>
	<h2>MPLAB Harmony Dual Shunt FOC SH Motor with PLL Estimator Application Template</h2>
	<p>	This template generates a code example that exercises Dual Shunt 
	FOC SH Motor with PLL Estimator with the following MHC options:</p>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Mode: Interrupt</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Clock Divider: 4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Warmup Clock: ADCHS_WARMUP_CLOCK_32</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Interrupt Source: ADC1_DATA0</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Interrupt Vector: ADC1_DATA0</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Number of ADC Channels: 3</br>
	<br><b>&nbsp&nbsp - Channel 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR0</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alternate Input: ADCHS_ALTERNATE_1_CLASS1_AN3</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Source: ADCHS_TRIGGER_SOURCE_PWM1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>&nbsp&nbsp - Channel 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alternate Input: ADCHS_ALTERNATE_3_CLASS1_AN0a</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Source: ADCHS_TRIGGER_SOURCE_PWM1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>&nbsp&nbsp - Channel 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR7</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inputs (class-2): ADCHS_CLASS2_AN10, ADCHS_CLASS2_AN15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Triggers: PWM1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>- MCPWM Driver</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Primary Timer Period: 3000</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Primary Timer Clock Divider: 1</br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 1</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Post-Scaler: 1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Primary Trigger Cycle Select: Generate Trigger while counter is Incrementing </br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC Trigger Source: Primary Trigger </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Primary Trigger Compare Value: 3000 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Fault 15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Interrupt  : Enable </br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Fault 15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Disable </br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 3</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Fault 15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Disable </br>
	<p>All other ADC and PWM driver configuration options are set to their 
	default values. 
	<p>The ADC driver configuration may be modified by 
	the user using MHC, under Harmony Framework Configuration -> Drivers - > ADC</p>
	<p>The PWM driver configuration may be modified by 
	the user using MHC, under Harmony Framework Configuration -> Drivers - > PWM</p></html>
	---endhelp---
	
config DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
    bool "Dual Shunt FOC using PLL Estimator on MCHV-3 (with internal Op-Amp)"
	set DRV_ADC_USE_DRIVER_NEEDED optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_MODE optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_POLLED_MODE optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLOCK_DIVIDER optionally to 1 if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_WARMUP_CLOCK optionally to "ADCHS_WARMUP_CLOCK_32" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_SOURCE optionally to "INT_SOURCE_ADC_1_DATA3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_VECTOR optionally to "INT_VECTOR_ADC1_DATA3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX0 optionally to "ADCHS_CHANNEL_3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHNL_3_ALT_INP_SEL_IDX0 optionally to "ADCHS_DEFAULT_CLASS1_AN3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_TRIGGER_SOURCE_IDX0 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX0 optionally to 1 if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX0 optionally to 2 if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX1 optionally to "ADCHS_CHANNEL_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHNL_1_ALT_INP_SEL_IDX1 optionally to "ADCHS_ALTERNATE_3_CLASS1_AN0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_TRIGGER_SOURCE_IDX1 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX1 optionally to 1 if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX1 optionally to 2 if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX2 optionally to "ADCHS_CHANNEL_7" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX2 optionally to 1 if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX2 optionally to 2 if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX0 optionally to  y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX0 optionally to "ADCHS_CLASS2_AN10" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX0 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX1 optionally to  y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX1 optionally to "ADCHS_CLASS2_AN15" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX1 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set USE_DRV_CMP optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}  
	set DRV_CMP_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_PERIPHERAL_ID_IDX0 optionally to "CMP_ID_3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_OUTPUT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_OPAMP_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_INVERTING_INPUT_IDX0 optionally to "CMP_INVERTING_INPUT_4" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_NON_INVERTING_INPUT_IDX0 optionally to "CMP_NON_INVERTING_INPUT_CDAC" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_PERIPHERAL_ID_IDX1 optionally to "CMP_ID_2" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_OPAMP_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_INVERTING_INPUT_IDX1 optionally to "CMP_INVERTING_INPUT_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_NON_INVERTING_INPUT_IDX1 optionally to "CMP_NON_INVERTING_INPUT_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_OPAMP_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
    set DRV_CMP_INVERTING_INPUT_IDX2 optionally to "CMP_INVERTING_INPUT_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
	set DRV_CMP_NON_INVERTING_INPUT_IDX2 optionally to "CMP_NON_INVERTING_INPUT_1"	if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set USE_DRV_MCPWM optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DRIVER_MODE optionally to "STATIC" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_STOP_IN_IDLE_MODE optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_CLOCK_PRESCALER optionally to "MCPWM_CLOCK_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_TIMER_PERIOD optionally to "3000" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_TIMER_PERIOD optionally to "8" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_PRESCALER optionally to "2" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_CLOCK_PRESCALER optionally to "MCPWM_CLOCK_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_TIMER_PERIOD optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_COMPARE_VALUE optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_POSTSCALER optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_INTERRUPT_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_COMPARE_VALUE optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_POSTSCALER optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_INTERRUPT_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_PRESCALER optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INSTANCES_NUMBER optionally to 12 if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX0 optionally to "MCPWM_CHANNEL1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX0 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX0 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX0 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX0 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX0 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX0 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX0 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX0 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX0 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX0 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX0 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX0 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX0 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX0 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX0 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX0 optionally to "2999" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX0 optionally to "240" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX0 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX0 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX0 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX0 optionally to "MCPWM_FAULT_SOURCE_IS_COMPARATOR3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX0 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX0 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX0 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX0 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX0 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INTERRUPT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PERIOD_MATCH_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PERIOD_RESET_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_PRIORITY_IDX0 optionally to "INT_PRIORITY_LEVEL4" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_SUBPRIORITY_IDX0 optionally to "INT_SUBPRIORITY_LEVEL0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX1 optionally to "MCPWM_CHANNEL2" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX1 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX1 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX1 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX1 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX1 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX1 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX1 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX1 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX1 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX1 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX1 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX1 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX1 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX1 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX1 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX1 optionally to "240" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX1 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX1 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX1 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX1 optionally to "MCPWM_FAULT_SOURCE_IS_COMPARATOR3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX1 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX1 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX1 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX1 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX1 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX2 optionally to "MCPWM_CHANNEL3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX2 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX2 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX2 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX2 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX2 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX2 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX2 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX2 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX2 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX2 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX2 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX2 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX2 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX2 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX2 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX2 optionally to "240" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX2 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX2 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX2 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX2 optionally to "MCPWM_FAULT_SOURCE_IS_COMPARATOR3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX2 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX2 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX2 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX2 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX2 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX3 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX4 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX5 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX6 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX7 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX8 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX9 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX10 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX11 optionally to n if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set ICESEL optionally to "ICS_PGx2" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_FUNCTION_TYPE optionally to "GPIO_OUT" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_PORT_CHANNEL optionally to "G" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_DIR optionally to "Out" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_1_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_FUNCTION_TYPE optionally to "PWM1H" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_PORT_PIN optionally to "14" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_4_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_FUNCTION_TYPE optionally to "PWM1L" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_5_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_FUNCTION_TYPE optionally to "AN10" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_20_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_FUNCTION_TYPE optionally to "OA2OUT" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_PORT_PIN optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_22_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_FUNCTION_TYPE optionally to "OA2IN+" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_23_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_FUNCTION_TYPE optionally to "OA2IN-" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_PORT_PIN optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_24_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_FUNCTION_TYPE optionally to "OA1OUT" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_25_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_FUNCTION_TYPE optionally to "OA1IN+" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_PORT_PIN optionally to "2" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_26_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_FUNCTION_TYPE optionally to "OA1IN-" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_PORT_PIN optionally to "3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_27_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_FUNCTION_TYPE optionally to "OA3OUT" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_PORT_PIN optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_32_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_FUNCTION_TYPE optionally to "OA3IN-" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_33_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_FUNCTION_TYPE optionally to "OA3IN+" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_PORT_PIN optionally to "2" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_34_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_FUNCTION_TYPE optionally to "AN15" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_PORT_CHANNEL optionally to "E" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_44_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_FUNCTION_TYPE optionally to "DAC3" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_PORT_PIN optionally to "8" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_49_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_FUNCTION_TYPE optionally to "GPIO_OUT" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_PORT_PIN optionally to "5" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_PORT_CHANNEL optionally to "F" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_DIR optionally to "Out" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_61_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_FUNCTION_TYPE optionally to "CLKI" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_63_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_FUNCTION_TYPE optionally to "DAC2" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_PORT_PIN optionally to "10" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_71_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE} 
	set BSP_PIN_78_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_FUNCTION_TYPE optionally to "GPIO_IN" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_PORT_PIN optionally to "7" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_78_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_FUNCTION_TYPE optionally to "GPIO_IN" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_PORT_CHANNEL optionally to "G" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_89_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_FUNCTION_TYPE optionally to "PWM3H" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_PORT_PIN optionally to "10" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_93_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_FUNCTION_TYPE optionally to "PWM3L" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_PORT_PIN optionally to "11" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_94_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_FUNCTION_TYPE optionally to "PWM2H" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_98_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_FUNCTION_TYPE optionally to "PWM2L" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_PORT_PIN optionally to "13" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}
	set BSP_PIN_99_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}


	
	default n
	---help---
	<!DOCTYPE HTML>
	<html>
	<h2>MPLAB Harmony Dual Shunt FOC High Voltage Motor with PLL Estimator Application Template</h2>
	<p>	This template generates a code example that exercises Dual Shunt 
	FOC High Voltage Motor with PLL Estimator with the following MHC options:</p>
	<br><b>- ADC Driver </b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Mode: Interrupt</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Clock Divider: 1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Warmup Clock: ADCHS_WARMUP_CLOCK_32</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Interrupt Source: ADC1_DATA3</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Interrupt Vector: ADC1_DATA3</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Number of ADC Channels: 3</br>
	<br><b>&nbsp&nbsp - Channel 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR3</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alternate Input: ADCHS_DEFAULT_CLASS1_AN3</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Source: ADCHS_TRIGGER_SOURCE_PWM1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>&nbsp&nbsp - Channel 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alternate Input: ADCHS_ALTERNATE_3_CLASS1_AN0</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Source: ADCHS_TRIGGER_SOURCE_PWM1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>&nbsp&nbsp - Channel 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR7</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inputs (class-2): ADCHS_CLASS2_AN10, ADCHS_CLASS2_AN15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Triggers: PWM1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>	
	<br><b>- CMP Driver</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Mode: Polling</br>
	<br><b>&nbsp&nbsp - Channel 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Module: CMP_ID_3 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Op-Amp: Enabled 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inverting Input: CMP_INVERTING_INPUT_4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Non-Inverting Input: CMP_NON_INVERTING_INPUT_CDAC </br>
	<br><b>&nbsp&nbsp - Channel 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Module: CMP_ID_2 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Op-Amp: Enabled 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inverting Input: CMP_INVERTING_INPUT_1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Non-Inverting Input: CMP_NON_INVERTING_INPUT_1 </br>
	<br><b>&nbsp&nbsp - Channel 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Module: CMP_ID_1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Comparator Output: Enabled</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Op-Amp: Enabled 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inverting Input: CMP_INVERTING_INPUT_1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Non-Inverting Input: CMP_NON_INVERTING_INPUT_1 </br>	
	<br><b>- MCPWM Driver</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Primary Timer Period: 3000</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Primary Timer Clock Divider: 1</br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 1</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Post-Scaler: 1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Primary Trigger Cycle Select: Generate Trigger while counter is Incrementing </br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC Trigger Source: Primary Trigger </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Primary Trigger Compare Value: 3000 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Comparator 3 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Interrupt  : Enable </br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Comparator 3 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Disable </br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 3</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Comparator 3 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Disable </br>
	<p>All other ADC and MCPWM driver configuration options are set optionally to their 
	default values. 
	<p>The ADC driver configuration may be modified by 
	the user using MHC, under Harmony Framework Configuration -> Drivers - > ADC</p>
	<p>The MCPWM driver configuration may be modified by 
	the user using MHC, under Harmony Framework Configuration -> Drivers - > PWM</p></html>
	---endhelp---

	config DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
    bool "Dual Shunt FOC using PLL Estimator on MCHV-3 (with external Op-Amp)"
	set DRV_ADC_USE_DRIVER_NEEDED optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_MODE optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_POLLED_MODE optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLOCK_DIVIDER optionally to 1 if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_WARMUP_CLOCK optionally to "ADCHS_WARMUP_CLOCK_32" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_SOURCE optionally to "INT_SOURCE_ADC_1_DATA3" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_INTERRUPT_VECTOR optionally to "INT_VECTOR_ADC1_DATA3" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX0 optionally to "ADCHS_CHANNEL_3" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHNL_3_ALT_INP_SEL_IDX0 optionally to "ADCHS_ALTERNATE_2_CLASS1_AN8" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_TRIGGER_SOURCE_IDX0 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX0 optionally to 1 if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX0 optionally to 2 if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX1 optionally to "ADCHS_CHANNEL_1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHNL_1_ALT_INP_SEL_IDX1 optionally to "ADCHS_ALTERNATE_1_CLASS1_AN4" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_TRIGGER_SOURCE_IDX1 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX1 optionally to 1 if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE} 
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX1 optionally to 2 if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_ID_IDX2 optionally to "ADCHS_CHANNEL_7" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX2 optionally to 1 if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE} 
	set DRV_ADCHS_SAMPLE_TIME_COUNT_IDX2 optionally to 2 if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX0 optionally to  y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX0 optionally to "ADCHS_CLASS2_AN10" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX0 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX1 optionally to  y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX1 optionally to "ADCHS_CLASS2_AN15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX1 optionally to "ADCHS_TRIGGER_SOURCE_PWM1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}	
	set USE_DRV_MCPWM optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DRIVER_MODE optionally to "STATIC" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_STOP_IN_IDLE_MODE optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_CLOCK_PRESCALER optionally to "MCPWM_CLOCK_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_TIMER_PERIOD optionally to "3000" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_TIMER_PERIOD optionally to "8" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_PRESCALER optionally to "2" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_CLOCK_PRESCALER optionally to "MCPWM_CLOCK_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_TIMER_PERIOD optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_COMPARE_VALUE optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_POSTSCALER optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PRIMARY_SEVT_INTERRUPT_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_COMPARE_VALUE optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_POSTSCALER optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SECONDARY_SEVT_INTERRUPT_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_PRESCALER optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHOP_CLOCK_ENABLE optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INSTANCES_NUMBER optionally to 12 if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX0 optionally to "MCPWM_CHANNEL1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX0 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX0 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX0 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX0 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX0 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX0 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX0 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX0 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX0 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX0 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX0 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX0 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX0 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX0 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX0 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX0 optionally to "2999" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX0 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX0 optionally to "240" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX0 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX0 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX0 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX0 optionally to "MCPWM_FAULT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX0 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX0 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX0 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX0 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX0 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX0 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX0 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INTERRUPT_ENABLE_IDX0 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PERIOD_MATCH_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PERIOD_RESET_INTERRUPT_ENABLE_IDX0 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_PRIORITY_IDX0 optionally to "INT_PRIORITY_LEVEL4" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_SUBPRIORITY_IDX0 optionally to "INT_SUBPRIORITY_LEVEL0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX1 optionally to "MCPWM_CHANNEL2" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX1 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX1 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX1 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX1 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX1 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX1 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX1 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX1 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX1 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX1 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX1 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX1 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX1 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX1 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX1 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX1 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE} 
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX1 optionally to "240" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX1 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX1 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX1 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX1 optionally to "MCPWM_FAULT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX1 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX1 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX1 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX1 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX1 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX1 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX1 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX1 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX1 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ID_IDX2 optionally to "MCPWM_CHANNEL3" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_SOURCE_IDX2 optionally to "MCPWM_TIME_BASE_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TIME_BASE_MODE_IDX2 optionally to "MCPWM_TIME_BASE_SYNCHRONIZED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ALIGNMENT_MODE_IDX2 optionally to "MCPWM_SYMMETRIC_CENTER_ALIGNED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OUTPUT_MODE_IDX2 optionally to "MCPWM_OUTPUT_COMPLIMENTARY_MODE" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_OUTPUT_POLARITY_IDX2 optionally to "MCPWM_PWMxH_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_OUTPUT_POLARITY_IDX2 optionally to "MCPWM_PWMxL_ACTIVEHIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_MODE_IDX2 optionally to "MCPWM_DEADTIME_POSITIVE" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_DEADTIME_COMPENSATION_POLARITY_IDX2 optionally to "MCPWM_DEADTIME_COMPENSATION_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PDC_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_SDC_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_PHASE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTR_VALUE_IDX2 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_ALTDTR_VALUE_IDX2 optionally to "120" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_DTCOMP_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_POSTSCALER_IDX2 optionally to "MCPWM_TRIGGER_DIVIDE_BY_1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_CYCLE_SELECT_IDX2 optionally to "MCPWM_PRIMARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_CYCLE_SELECT_IDX2 optionally to "MCPWM_SECONDARY_TRIGGER_DURING_TIMER_INCREMENTING_DECREMENTING" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_ADC_TRIGGER_SOURCE_IDX2 optionally to "MCPWM_ADC_TRIGGER_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_TRIGGER_INTERRUPT_SOURCE_IDX2 optionally to "MCPWM_TRIGGER_INTERRUPT_SOURCE_PRIMARY" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PRIMARY_TRIGGER_COMPARE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SECONDARY_TRIGGER_COMPARE_VALUE_IDX2 optionally to "0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHRISINGEDGE_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxHFALLINGEDGE_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLRISINGEDGE_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_TRIGGER_PWMxLFALLINGEDGE_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_LEB_CONTROL_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_LEB_CONTROL_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_LEB_PERIOD_VALUE_IDX2 optionally to "240" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CHOP_CLOCK_SOURCE_IDX2 optionally to "MCPWM_CHOP_CLOCK_SOURCE_IS_CHOP_CLOCK_GENERATOR" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxH_CHOP_CONTROL_IDX2 optionally to "MCPWM_PWMxH_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMxL_CHOP_CONTROL_IDX2 optionally to "MCPWM_PWMxL_CHOP_DISABLED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_SOURCE_IDX2 optionally to "MCPWM_FAULT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_INPUT_POLARITY_IDX2 optionally to "MCPWM_FAULT_INPUT_POLARITY_ACTIVE_LOW" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_FAULT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_FAULT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_FAULT_MODE_IDX2 optionally to "MCPWM_FAULT_MODE_LATCHED" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_SOURCE_IDX2 optionally to "MCPWM_CURRENTLIMIT_SOURCE_IS_FLT15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_INPUT_POLARITY_IDX2 optionally to "MCPWM_CURRENTLIMIT_INPUT_POLARITY_ACTIVE_HIGH" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_CURRENTLIMIT_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_CURRENTLIMIT_MODE_IDX2 optionally to "MCPWM_CURRENTLIMIT_DISABLE" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_VALUE_IDX2 optionally to "MCPWM_OVERRIDE_PWMxH_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxH_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_VALUE_IDX2 optionally to "MCPWM_OVERRIDE_PWMxL_0" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_OVERRIDE_PWMxL_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SYNC_OVERRIDE_SELECT_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWMH_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_PWML_ENABLE_IDX2 optionally to y if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_SWAP_PWMH_PWML_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_CHANNEL_INTERRUPT_ENABLE_IDX2 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX3 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX4 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX5 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX6 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX7 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX8 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX9 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX10 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set DRV_MCPWM_INST_IDX11 optionally to n if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set ICESEL optionally to "ICS_PGx2" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_FUNCTION_TYPE optionally to "GPIO_OUT" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_PORT_CHANNEL optionally to "G" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_DIR optionally to "Out" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_1_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_FUNCTION_TYPE optionally to "PWM1H" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_PORT_PIN optionally to "14" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_4_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_FUNCTION_TYPE optionally to "PWM1L" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_5_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_FUNCTION_TYPE optionally to "AN10" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_20_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_FUNCTION_TYPE optionally to "AN9" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_PORT_PIN optionally to "11" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_21_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_FUNCTION_TYPE optionally to "AN15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_PORT_PIN optionally to "15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_PORT_CHANNEL optionally to "E" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_44_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_FUNCTION_TYPE optionally to "FLT15" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_PORT_PIN optionally to "4" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_50_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_FUNCTION_TYPE optionally to "AN24" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_PORT_PIN optionally to "4" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_PORT_CHANNEL optionally to "A" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_51_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_FUNCTION_TYPE optionally to "GPIO_OUT" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_PORT_PIN optionally to "5" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_PORT_CHANNEL optionally to "F" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_DIR optionally to "Out" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_61_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_FUNCTION_TYPE optionally to "CLKI" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_63_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_FUNCTION_TYPE optionally to "DAC2" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_PORT_PIN optionally to "10" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_MODE optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_71_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE} 
	set BSP_PIN_78_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_FUNCTION_TYPE optionally to "GPIO_IN" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_PORT_PIN optionally to "7" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_PORT_CHANNEL optionally to "C" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_78_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_FUNCTION_TYPE optionally to "GPIO_IN" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_PORT_PIN optionally to "1" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_PORT_CHANNEL optionally to "G" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_89_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_FUNCTION_TYPE optionally to "PWM3H" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_PORT_PIN optionally to "10" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_93_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_FUNCTION_TYPE optionally to "PWM3L" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_PORT_PIN optionally to "11" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_94_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_FUNCTION_TYPE optionally to "PWM2H" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_PORT_PIN optionally to "12" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_98_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_FUNCTION_NAME optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_FUNCTION_TYPE optionally to "PWM2L" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_PORT_PIN optionally to "13" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_PORT_CHANNEL optionally to "B" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_MODE optionally to "DIGITAL" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_DIR optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_LAT optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_OD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_CN optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_PU optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}
	set BSP_PIN_99_PD optionally to "" if DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}


	default n
	---help---
	<!DOCTYPE HTML>
	<html>
	<h2>MPLAB Harmony Dual Shunt FOC High Voltage Motor with PLL Estimator Application (External Opamp) Template</h2>
	<p>	This template generates a code example that exercises Dual Shunt 
	FOC High Voltage Motor with PLL Estimator with the following MHC options:</p>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Mode: Interrupt</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Clock Divider: 1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Warmup Clock: ADCHS_WARMUP_CLOCK_32</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Interrupt Source: ADC1_DATA3</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Interrupt Vector: ADC1_DATA3</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Number of ADC Channels: 3</br>
	<br><b>&nbsp&nbsp - Channel 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR3</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alternate Input: ADCHS_ALTERNATE_2_CLASS1_AN8</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Source: ADCHS_TRIGGER_SOURCE_PWM1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>&nbsp&nbsp - Channel 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alternate Input: ADCHS_ALTERNATE_1_CLASS1_AN4</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Source: ADCHS_TRIGGER_SOURCE_PWM1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>&nbsp&nbsp - Channel 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC instance: SAR7</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Clock Divider: 1</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Inputs (class-2): ADCHS_CLASS2_AN10, ADCHS_CLASS2_AN15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Triggers: PWM1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Sample Time Count: 2</br>
	<br><b>- MCPWM Driver</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Implementation: STATIC</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Primary Timer Period: 3000</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Driver Primary Timer Clock Divider: 1</br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 0 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 1</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Trigger Post-Scaler: 1 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Primary Trigger Cycle Select: Generate Trigger while counter is Incrementing </br>
	<br>&nbsp&nbsp&nbsp&nbsp - ADC Trigger Source: Primary Trigger </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Primary Trigger Compare Value: 3000 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Fault 15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Interrupt  : Enable </br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 1 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 2</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Fault 15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Disable </br>
	<br><b>&nbsp&nbsp - MCPWM Channel Instance 2 Setup</b></br>
	<br>&nbsp&nbsp&nbsp&nbsp - MCPWM Channel ID: MCPWM Channel 3</br>	
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Source: Primary Time Base</br>
	<br>&nbsp&nbsp&nbsp&nbsp - Time Base Mode: Synchronized </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Alignment Mode: Symmetric Center Aligned </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Output Mode: Complimentary </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Polarity: Active High </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Mode: Positive Deadtime </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Deadtime Compensation: Disabled </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input LEB : Enable </br>
	<br>&nbsp&nbsp&nbsp&nbsp - LEB Period : 240 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Mode : LATCHED </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Source : Fault 15 </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Fault Input Polarity : Active Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWMH Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - PWML Fault Override Value  : Low </br>
	<br>&nbsp&nbsp&nbsp&nbsp - Channel Interrupt  : Disable </br>
	<p>All other ADC and PWM driver configuration options are set to their 
	default values. 
	<p>The ADC driver configuration may be modified by 
	the user using MHC, under Harmony Framework Configuration -> Drivers - > ADC</p>
	<p>The PWM driver configuration may be modified by 
	the user using MHC, under Harmony Framework Configuration -> Drivers - > PWM</p></html>
	---endhelp---
	
	

ifblock DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}

add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_lv_int_opamp_macros_app.h.ftl\">" to list APP_FREEMARKER_MACROS
add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_lv_int_opamp_macros_app.c.ftl\">" to list APP_FREEMARKER_MACROS
add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_lv_int_opamp_macros_system_config.h.ftl\">" to list APP_FREEMARKER_MACROS

endif

ifblock DUAL_SHUNT_FOC_PLL_LV_INT_OPAMP${INSTANCE}

add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_h_includes/>" to list APP${INSTANCE}_H_INCLUDES
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_system_config_h_app_constants/>" to list APP${INSTANCE}_H_CONSTANTS
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_h_type_definitions/>" to list APP${INSTANCE}_H_TYPE_DEFINITIONS
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_h_data/>" to list APP${INSTANCE}_H_APP_DATA
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_h_callback_function_declarations/>" to list APP${INSTANCE}_H_APP_CALLBACK_FUNCTION_DECLARATIONS
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_h_function_declarations/>" to list APP${INSTANCE}_H_APP_FUNCTION_DECLARATIONS
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_h_states/>" to list APP${INSTANCE}_H_APP_STATES

add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_includes/>" to list APP${INSTANCE}_C_INCLUDES
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_global_data/>" to list APP${INSTANCE}_C_GLOBAL_DATA
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_callback_functions/>" to list APP${INSTANCE}_C_CALLBACK_FUNCTIONS
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_local_functions/>" to list APP${INSTANCE}_C_LOCAL_FUNCTIONS
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_initialize/>" to list APP${INSTANCE}_C_INITIALIZE
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_tasks_data/>" to list APP${INSTANCE}_C_TASKS_DATA
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_tasks_state_init/>" to list APP${INSTANCE}_C_TASKS_STATE_INIT
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_tasks_calls_after_init/>" to list APP${INSTANCE}_C_TASKS_CALLS_AFTER_INIT
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_tasks_state_service_tasks/>" to list APP${INSTANCE}_C_TASKS_STATE_SERVICE_TASKS
add "^@macro_motor_control_ds_foc_pll_lv_int_opamp_app_c_tasks_states/>" to list APP${INSTANCE}_C_TASKS_STATES
endif

ifblock DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}

add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_lv_ext_opamp_macros_app.h.ftl\">" to list APP_FREEMARKER_MACROS
add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_lv_ext_opamp_macros_app.c.ftl\">" to list APP_FREEMARKER_MACROS
add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_lv_ext_opamp_macros_system_config.h.ftl\">" to list APP_FREEMARKER_MACROS

endif

ifblock DUAL_SHUNT_FOC_PLL_LV_EXT_OPAMP${INSTANCE}

add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_h_includes/>" to list APP${INSTANCE}_H_INCLUDES
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_system_config_h_app_constants/>" to list APP${INSTANCE}_H_CONSTANTS
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_h_type_definitions/>" to list APP${INSTANCE}_H_TYPE_DEFINITIONS
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_h_data/>" to list APP${INSTANCE}_H_APP_DATA
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_h_callback_function_declarations/>" to list APP${INSTANCE}_H_APP_CALLBACK_FUNCTION_DECLARATIONS
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_h_function_declarations/>" to list APP${INSTANCE}_H_APP_FUNCTION_DECLARATIONS
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_h_states/>" to list APP${INSTANCE}_H_APP_STATES

add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_includes/>" to list APP${INSTANCE}_C_INCLUDES
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_global_data/>" to list APP${INSTANCE}_C_GLOBAL_DATA
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_callback_functions/>" to list APP${INSTANCE}_C_CALLBACK_FUNCTIONS
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_local_functions/>" to list APP${INSTANCE}_C_LOCAL_FUNCTIONS
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_initialize/>" to list APP${INSTANCE}_C_INITIALIZE
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_tasks_data/>" to list APP${INSTANCE}_C_TASKS_DATA
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_tasks_state_init/>" to list APP${INSTANCE}_C_TASKS_STATE_INIT
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_tasks_calls_after_init/>" to list APP${INSTANCE}_C_TASKS_CALLS_AFTER_INIT
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_tasks_state_service_tasks/>" to list APP${INSTANCE}_C_TASKS_STATE_SERVICE_TASKS
add "^@macro_motor_control_ds_foc_pll_lv_ext_opamp_app_c_tasks_states/>" to list APP${INSTANCE}_C_TASKS_STATES
endif

ifblock DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}

add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_hv_int_opamp_macros_app.h.ftl\">" to list APP_FREEMARKER_MACROS
add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_hv_int_opamp_macros_app.c.ftl\">" to list APP_FREEMARKER_MACROS
add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_hv_int_opamp_macros_system_config.h.ftl\">" to list APP_FREEMARKER_MACROS

endif

ifblock DUAL_SHUNT_FOC_PLL_HV_INT_OPAMP${INSTANCE}

add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_h_includes/>" to list APP${INSTANCE}_H_INCLUDES
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_system_config_h_app_constants/>" to list APP${INSTANCE}_H_CONSTANTS
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_h_type_definitions/>" to list APP${INSTANCE}_H_TYPE_DEFINITIONS
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_h_data/>" to list APP${INSTANCE}_H_APP_DATA
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_h_callback_function_declarations/>" to list APP${INSTANCE}_H_APP_CALLBACK_FUNCTION_DECLARATIONS
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_h_function_declarations/>" to list APP${INSTANCE}_H_APP_FUNCTION_DECLARATIONS
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_h_states/>" to list APP${INSTANCE}_H_APP_STATES

add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_includes/>" to list APP${INSTANCE}_C_INCLUDES
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_global_data/>" to list APP${INSTANCE}_C_GLOBAL_DATA
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_callback_functions/>" to list APP${INSTANCE}_C_CALLBACK_FUNCTIONS
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_local_functions/>" to list APP${INSTANCE}_C_LOCAL_FUNCTIONS
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_initialize/>" to list APP${INSTANCE}_C_INITIALIZE
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_tasks_data/>" to list APP${INSTANCE}_C_TASKS_DATA
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_tasks_state_init/>" to list APP${INSTANCE}_C_TASKS_STATE_INIT
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_tasks_calls_after_init/>" to list APP${INSTANCE}_C_TASKS_CALLS_AFTER_INIT
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_tasks_state_service_tasks/>" to list APP${INSTANCE}_C_TASKS_STATE_SERVICE_TASKS
add "^@macro_motor_control_ds_foc_pll_hv_int_opamp_app_c_tasks_states/>" to list APP${INSTANCE}_C_TASKS_STATES
endif
ifblock DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}

add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_hv_ext_opamp_macros_app.h.ftl\">" to list APP_FREEMARKER_MACROS
add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_hv_ext_opamp_macros_app.c.ftl\">" to list APP_FREEMARKER_MACROS
add "^#include \"/utilities/mhc/config/gencode/framework/motor_control/templates/motor_control_ds_foc_pll_hv_ext_opamp_macros_system_config.h.ftl\">" to list APP_FREEMARKER_MACROS

endif

ifblock DUAL_SHUNT_FOC_PLL_HV_EXT_OPAMP${INSTANCE}

add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_h_includes/>" to list APP${INSTANCE}_H_INCLUDES
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_system_config_h_app_constants/>" to list APP${INSTANCE}_H_CONSTANTS
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_h_type_definitions/>" to list APP${INSTANCE}_H_TYPE_DEFINITIONS
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_h_data/>" to list APP${INSTANCE}_H_APP_DATA
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_h_callback_function_declarations/>" to list APP${INSTANCE}_H_APP_CALLBACK_FUNCTION_DECLARATIONS
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_h_function_declarations/>" to list APP${INSTANCE}_H_APP_FUNCTION_DECLARATIONS
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_h_states/>" to list APP${INSTANCE}_H_APP_STATES

add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_includes/>" to list APP${INSTANCE}_C_INCLUDES
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_global_data/>" to list APP${INSTANCE}_C_GLOBAL_DATA
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_callback_functions/>" to list APP${INSTANCE}_C_CALLBACK_FUNCTIONS
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_local_functions/>" to list APP${INSTANCE}_C_LOCAL_FUNCTIONS
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_initialize/>" to list APP${INSTANCE}_C_INITIALIZE
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_tasks_data/>" to list APP${INSTANCE}_C_TASKS_DATA
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_tasks_state_init/>" to list APP${INSTANCE}_C_TASKS_STATE_INIT
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_tasks_calls_after_init/>" to list APP${INSTANCE}_C_TASKS_CALLS_AFTER_INIT
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_tasks_state_service_tasks/>" to list APP${INSTANCE}_C_TASKS_STATE_SERVICE_TASKS
add "^@macro_motor_control_ds_foc_pll_hv_ext_opamp_app_c_tasks_states/>" to list APP${INSTANCE}_C_TASKS_STATES
endif

endmenu
